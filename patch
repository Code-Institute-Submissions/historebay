diff --git a/README.md b/README.md
index 5e33f09..a0a4412 100644
--- a/README.md
+++ b/README.md
@@ -58,7 +58,8 @@ Wireframes:
 * Newsletter Subscription - there could be a newsletter to inform registered user about newly arrived products on the page.
 * Online chat with Historebay - an online chat with Historebay where registered users can contact historebay directly.
 * Tracking system - to inform registered users on where their puchases are located at that moment.
-* Futher expansion of the user's profile page. E.g. letting users see the current address they are registered under and adding a profile picture.
+* Futher expansion of the user's profile page - E.g. letting users see the current address they are registered under and adding a profile picture.
+* More items on one page - I have been in doubt to show either 3 or 6 products per page. As I personallly think 6 would be too much, and I was nearing my deadline, I have kept it to 3 for now.
 
 # Known Issues
 A lot of issues have been solved and committed to GitHub on a very regular basis. However, there are stil some things that will need to get resolved.
@@ -100,56 +101,59 @@ A lot of issues have been solved and committed to GitHub on a very regular basis
     EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
     EMAIL_PORT = 587
     ```
-    The above code however is an instruction related to a newer version of Django (django 2.1). It does generate the email but still not send the actual. Proof of this is generated
-    inside the [_console_](https://github.com/Eucaa/historebay/blob/master/docs/blep5.PNG).
-    These logs can also be checked by using the command `$ heroku logs -a historebay --tail` in the command terminal.
-    So now, the user will see the message that "a new password has been sent by email", but the email itself does not arrive.
+  The above code however is an instruction related to a newer version of Django (django 2.1). It does generate the email but still not send the actual. Proof of this is generated
+  inside the [_console_](https://github.com/Eucaa/historebay/blob/master/docs/blep5.PNG).
+  These logs can also be checked by using the command `$ heroku logs -a historebay --tail` in the command terminal.
+  So now, the user will see the message that "a new password has been sent by email", but the email itself does not arrive.
 
-    The activation of SMTP can be done by activating a [_2-step-verification_](https://myaccount.google.com/signinoptions/two-step-verification/enroll-welcome). However, this requires an additional access
-    to a private gmail account, which I am not willing to give for this project.
-    A solution for this could be that the educator provides a dummy email address there these kind of issues can be arranged upon, or perhaps make the lesson material more compatible with the current
-    version of the programs and platforms you are required to work with.
+  The activation of SMTP can be done by activating a [_2-step-verification_](https://myaccount.google.com/signinoptions/two-step-verification/enroll-welcome). However, this requires an additional access
+  to a private gmail account, which I am not willing to give for this project.
+  A solution for this could be that the educator provides a dummy email address there these kind of issues can be arranged upon, or perhaps make the lesson material more compatible with the current
+  version of the programs and platforms you are required to work with.
 
-    As I had to keep to true to my dealine, I will need to try and fix this issue some other time.
-    This is the reason why `EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'` is stil set to console and not SMTP.
+  As I had to keep to true to my dealine, I will need to try and fix this issue some other time.
+  This is the reason why `EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'` is stil set to console and not SMTP. 
 
+* When on the reset password page, it is not possible to open the dropdown of categories and productType. Since the password reset function is a build-in Django function that has been set through the url_reset.py file and does not have
+  any view to adjust it's functionality (plus having to keept true to my deadline). I have not been able to find a solution for this yet. So this will need to get picked up later.
+
+# Resolved issues
+Some of the mayor issues I was coping with, have also been cleared.
 * To host images in your static files, I was instructed by the Institute to create a "S3 bucket" through AWS cloud services, as Heroku is not able to hold images that are not statically provided
   through JS or CSS. This needs to be installed togther with a radically static file called WhiteNoise. WhiteNoise alone can only host the JS and CSS [_static files_](http://whitenoise.evans.io/en/stable/django.html#serving-media-files;). 
-  Therefore, a collaboration of both is necessary to host other images. No other explantion to get around this or any alternatives have never been given during the lessons.  
-  Because this I was required the make an account at AWS. I already had two previous ones (since I hade made a previous project by using the AWS platform. However, credits kept running low quickly so I
+  Therefore, a collaboration of both is necessary to host other images than static ones. No other explantion to get around this or any alternatives have never been given during the lessons.  
+  Because of this, I was required the make an account at AWS. I already had two previous ones (since I hade made a previous project by using the AWS platform. However, credits kept running low quickly so I
   had to make an extra account and thus and extra email address to be able to finish that project on the same platform or I would have lost the data), I chose one of these to start up the procedure.
   For this setup, it is necessary to give your private credit- or debit card details. This is a requirement that AWS needs to verify your account so you can open this cloud server bucket. AWS will 
   deduct a temporary amount of 0,01 cents from your private bank account and will deposit this back later.
-  Since I do not own a credit card, I tried to use my debit card details. However, my (Dutch) bank card does not support something as Mastercard or Visa etc(a bank card and credit card are really two separate things here),
-  so I was not allowed to create a bucket for myself. I have contacted Code Institute for support and ask how to solve this. Unfortunately, they could not give me any solutions and advised me to
+  Since I do not own a credit card, I tried to use my debit card details. However, my (Dutch) bank card does not support something as Mastercard or Visa option etc either (a bank card and a credit card are really two separate things here),
+  so I was not allowed to create a S3-bucket for myself. I have contacted Code Institute for support and ask how to solve this. Unfortunately, they could not give me any solutions and advised me to
   contact AWS help desk myself, which I did. After explaining the situation to the AWS customer service, they informed me that a debit card must also have MasterCard or Visa option for it to be able to
   work. So they couldn't really help me out either. 
 
   Eventually, I have been able to find a solution for viewing my images through [_base64_](https://en.wikipedia.org/wiki/Base64). I have been using this options in a previous project. But the images loaded
-  slowly. I have fixed this by downsizing the sizes of the images themselves. However, the "after 24-hours clean-up" from Heroku still stand. and will delete the in django uploaded images either way.
+  slowly. I have tried to fix this by downsizing the sizes of the images themselves. However, the "after 24-hours clean-up" from Heroku still stand. and will delete the in django uploaded images either way.
   As last resort. I have attempted to create a function in the `models.py` file of my `products` app to resolve this:
   ```
-      def save(self, *args, **kwargs):
-        self.image_as_base64 = base64.b64encode(self.image.file.read())
-        
-        newFilename = str(uuid.uuid4())
-        with open(newFilename, 'wb') as f:
-            f.write(base64.b64decode(self.image_as_base64))
-        self.image = newFilename
+    def save(self, *args, **kwargs):
+        if self.image_as_base64 == "":
+            self.image_as_base64 = base64.b64encode(self.image.file.read())
+
+            newFilename = str(uuid.uuid4())
+            with open(newFilename, 'wb') as f:
+                f.write(base64.b64decode(self.image_as_base64))
+            self.image = newFilename
         super(Product, self).save(*args, **kwargs)
 
     def get_image_data(self):
         return 'data:image;base64,%s' % (self.image_as_base64)
   ```
-  This function should store the image as a blob the field of image_as_base64 ( which is hidden from in the Django admin panel itself). The get_image_data could be used as a source in the <img> tag.
-  That way, I might have been able to "dynamically" upload images to my website without using the credit card option that is given in the course. 
+  This function stores the images as blobs in the field of image_as_base64 ( which is hidden in the Django admin panel itself). The get_image_data could be used as a source in the <img> tag.
+  That way, I have been able to "dynamically" upload images to my website without using the credit card + WhiteNoise option that is given in the course. 
   Since I could not make use of the only option that was provided by Code Institue themselves (using a credit card optioned bank card), I found that this was the only
-  good alternative I could think of outside what has been covered during the course.
+  good alternative I could think of outside of what has been covered during the course.
   To resolve problems like these for future students, a good option would be to let the Institue open an AWS account where students can apply for a bucket, or provide a credit card number that can be used specifically for this project part
-  only. The most basal option would be to at least inform future students about this issue before they start this part of the project. 
-
-* When on the reset password page, it is not possible to open the dropdown of categories and productType. Since the password reset function is a build-in Django function that has been set through the url_reset.py file and does not have
-  any view to adjust it's functionality (plus having to keept true to my deadline). I have not been able to find a solution for this yet. So this will need to get picked up later.
+  only. The most basal option would be to at least inform future students about this issue before they start this part of the project.
 
 # Technologies Used
 * [HTML5](https://www.w3schools.com/html/html5_intro.asp)
